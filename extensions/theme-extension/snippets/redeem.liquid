<script>

  async function generateRandomKey(length = 8) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let randomKey = '';
    
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      randomKey += characters[randomIndex];
    }
    
    return randomKey;
  }

  async function redeem() {
    const cardNumber = document.getElementById('gift_card_number').value.replace(/\D/g, '');
    const cardPin = document.getElementById('gift_card_pin').value.replace(/\D/g, '');
    const amount = parseInt(document.getElementById('gc_amount').value.trim()) || 0;
  
    if (!validateCardDetails(cardNumber, cardPin)) {
      applyRedeemButton.disabled = false;
      return false;
    }
    if(amount === 0) {
      apiResponseMsg.classList.add('response-error');
      apiResponseMsg.innerHTML = 'Please enter a valid redeem amount.';
      applyRedeemButton.disabled = false;
      return false;
    }
    const { totalPrice } = await cartData();
    let cartValue = parseInt(totalPrice / 100);  
    try {
      let apiRawData = JSON.parse(localStorage.getItem('QC-ApiData'));
      let IdempotencyKey = await generateRandomKey();
  
      const payload = {
        TransactionModeId: '0',
        TransactionTypeId: "302",
        IdempotencyKey: IdempotencyKey,
        InvoiceNumber: `PC-${apiRawData.transId}`,
        BillAmount: cartValue,
        Notes: `{VldType~GCRDM|Amt~${amount}|BillAmount~${cartValue}}`,
        InputType: '1',
        NumberOfCards: '1',
        Cards: [{ CardNumber: cardNumber, CardPin: cardPin, Amount: amount }],
      };
  
      const response = await fetch(POST_Redeem, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          DateAtClient: DateAtServer,
          TransactionId: apiRawData.transId,
          Authorization: `Bearer ${apiRawData.AuthToken}`,
        },
        body: JSON.stringify(payload),
      });
  
      if (response.status !== 200) {
        throwErrorMessage(response.status)
        return false
      }
  
      const data = await response.json();
      if (data.ResponseCode === 0) {
        apiRawData.transId++;
        localStorage.setItem('QC-ApiData', JSON.stringify(apiRawData));
        await createDiscountCode(data);
      } else {
        apiResponseMsg.classList.add('response-error')
        apiResponseMsg.innerHTML = `${data.Cards[0].ResponseMessage}`;
        applyRedeemButton.disabled = false;
        return false;
      }
  
    } catch (error) {
      apiResponseMsg.classList.add('response-error');
      apiResponseMsg.innerHTML = `Service Unavailable. Please try after sometime`;
      applyRedeemButton.disabled = false;
      return false;
    }
  }
</script>
